version: '3.8'
services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - '5173:5173'
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://localhost:8000


  backend:  
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - '8000:8000'
    volumes:
      - ./backend:/app
    environment:
      - FRONTEND_ORIGINS=http://  :3000,http://127.0.0.1:3000,https://localhost:3000,https://127.0.0.1:3000,http://localhost:5173,http://127.0.0.1:5173,https://localhost:5173,https://127.0.0.1:5173, http://172.16.193.82:5173
      - POSTGRES_HOST=db
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=appdb
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request,sys;\ntry:\n  resp=urllib.request.urlopen('http://localhost:8000/swagger.json', timeout=2)\n  sys.exit(0 if resp.getcode()==200 else 1)\nexcept Exception:\n  sys.exit(1)\""]
      interval: 5s
      timeout: 5s
      retries: 10

  aimodel:
    build:
      context: ./AIModel
      dockerfile: Dockerfile
    environment:
      - BACKEND_BASE_URL=http://backend:8000
    volumes:
      - ./AIModel:/app
    depends_on:
      backend:
        condition: service_healthy
    # Run daily via a simple loop (can be replaced with cron)
    command: /bin/sh -c "while true; do python trainmodels.py; sleep 86400; done"


  db:
    image: postgres:13
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: appdb
    volumes:
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d appdb"]
      interval: 5s
      timeout: 5s
      retries: 5


volumes:
  postgres_data: